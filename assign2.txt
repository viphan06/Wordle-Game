Assign2: Due 11:59PM CT March 8

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

Please bring forward the practices, techniques, and tools you have learned so far. This includes: 
Good code quality
Lightweight design
Minimum code
Automated testing                                                         
Code coverage
Build files (I created them for you in assign1, but it's your turn now to practice and learn further)
Change build.sh in your repository to point to assign2 instead of assign1

In this assign2, we are going to start from where we left the code for assign1. Please copy over the things you need from assign1 to assign2. You can start the reviews right after you take this step. That way you can get moving on assign2 without any delay.

There are two major tasks we plan to accomplish in this assignment.

1. Get the code working well for the requirements in hw2.txt, if we have not already done so.
2. Make make two significant updates to the game.

A. When the game starts the word to guess will be picked in random from <https://agilec.cs.uh.edu/words>. Design in a way that if we decide to get the words from a different location in the future, then most of the code will not have to change, but new code may have to be written minimally to accommodate.

B. When a user presses the "Guess" button, check if the users input is a word with correct spelling by making a query to <http://agilec.cs.uh.edu/spellcheck?check=WORD> where WORD is replaced by the actual word the user enters. The site will return a true for correct spelling and false for an incorrect spelling. If the spelling is correct, continue to provide the feedback to the user for the word entered. If the guess is incorrect, display "Not a word." Design in a way that if we decide to check the spelling using a different service in the future, then most of the code will not have to change, but new code may have to be written minimally to accommodate.

The user can continue to edit the current guess if the word they entered is not a correct spelling. They do not lose a turn if they entered an incorrect spelling. Disable the "Guess" button until the user changes the word after entering a wrong spelling.

Please do not start on the "significant updates" part until we go over the application in the reviews and I give you a green signal that we can start on the updates part.

Total [100]: 58

Play the game with all the expected features[20]: -20
Typing into the GUI does not result in any action.

All tests pass[10]:

Test quality[20]: -10
    def test_is_spelling_correct_returns_true(self):
        self.assertTrue(is_spelling_correct('FAVOR'))
Need to use mocks to verify the dependencies were called appropriately.

    def test_get_words_from_service_returns_expected_words(self):       
Should not assume the words will never change.

Code coverage[10]:
Quality of design of random word selection[10]: -7
Way too much code related to randomization.
def get_word_list(): - should take a word list and a seed

With the given design there is no guarantee the words will not repeat between two calls.

Quality of design of spell check feature[10]: -5
def parse(word):
    if word == 'true': return True
    if word == 'false': return False
    raise ValueError("Did not receive true or false")

Rather verbose, can be reduced some to make it concise.

def is_spelling_correct(guess_word, get_response = get_response):
No need to pass get_response, it can be mocked effectively instead.

Programm gracefully handles network failures [10]:
Code quality[10]:

